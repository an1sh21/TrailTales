From 506ca92b834fbc5e4500942b3979275e72081624 Mon Sep 17 00:00:00 2001
From: VidyaSenevirathna <165774022+VidyaSenevirathna@users.noreply.github.com>
Date: Thu, 6 Mar 2025 21:55:49 +0530
Subject: [PATCH 04/22] Adding the changes to middleware and model folders

---
 src/middleware/auth.js     | 18 ++++++++++++++++++
 src/models/Quest.js        | 22 ++++++++++++++++++++++
 src/models/StoryToken.js   | 30 ++++++++++++++++++++++++++++++
 src/models/UserProgress.js | 36 ++++++++++++++++++++++++++++++++++++
 4 files changed, 106 insertions(+)
 create mode 100644 src/middleware/auth.js
 create mode 100644 src/models/Quest.js
 create mode 100644 src/models/StoryToken.js
 create mode 100644 src/models/UserProgress.js

diff --git a/src/middleware/auth.js b/src/middleware/auth.js
new file mode 100644
index 0000000..13fe285
--- /dev/null
+++ b/src/middleware/auth.js
@@ -0,0 +1,18 @@
+const { admin } = require('../config/firebase');
+
+const auth = async (req, res, next) => {
+  try {
+    const token = req.headers.authorization?.split('Bearer ')[1];
+    if (!token) {
+      return res.status(401).json({ message: 'No token provided' });
+    }
+
+    const decodedToken = await admin.auth().verifyIdToken(token);
+    req.user = decodedToken;
+    next();
+  } catch (error) {
+    res.status(401).json({ message: 'Invalid token' });
+  }
+};
+
+module.exports = auth; 
\ No newline at end of file
diff --git a/src/models/Quest.js b/src/models/Quest.js
new file mode 100644
index 0000000..de5902d
--- /dev/null
+++ b/src/models/Quest.js
@@ -0,0 +1,22 @@
+// Data structure for Quests
+const questStructure = {
+    title: String,
+    description: String,
+    difficulty: String, // 'easy', 'medium', 'hard'
+    theme: String,
+    locations: [
+      {
+  
+        name: String,
+        coordinates: {
+          latitude: Number,
+          longitude: Number
+        },
+        storyTokenId: String
+      }
+    ],
+    isActive: Boolean,
+    createdAt: Date
+  };
+  
+  module.exports = questStructure
\ No newline at end of file
diff --git a/src/models/StoryToken.js b/src/models/StoryToken.js
new file mode 100644
index 0000000..9063743
--- /dev/null
+++ b/src/models/StoryToken.js
@@ -0,0 +1,30 @@
+const mongoose = require('mongoose');
+
+const storyTokenSchema = new mongoose.Schema({
+  title: {
+    type: String,
+    required: true,
+  },
+  description: {
+    type: String,
+    required: true,
+  },
+  arModel: {
+    type: String,  // URL to AR model
+    required: true,
+  },
+  collectibleCard: {
+    image: String,
+    rarity: String,
+    description: String
+  },
+  location: {
+    coordinates: {
+      latitude: Number,
+      longitude: Number,
+    },
+    radius: Number  // Detection radius in meters
+  }
+});
+
+module.exports = mongoose.model('StoryToken', storyTokenSchema); 
\ No newline at end of file
diff --git a/src/models/UserProgress.js b/src/models/UserProgress.js
new file mode 100644
index 0000000..d5c637b
--- /dev/null
+++ b/src/models/UserProgress.js
@@ -0,0 +1,36 @@
+const mongoose = require('mongoose');
+
+const userProgressSchema = new mongoose.Schema({
+  userId: {
+    type: mongoose.Schema.Types.ObjectId,
+    ref: 'User',
+    required: true
+  },
+  questId: {
+    type: mongoose.Schema.Types.ObjectId,
+    ref: 'Quest',
+    required: true
+  },
+  collectedTokens: [{
+    type: mongoose.Schema.Types.ObjectId,
+    ref: 'StoryToken'
+  }],
+  completedLocations: [{
+    type: mongoose.Schema.Types.ObjectId,
+    ref: 'Location'
+  }],
+  startedAt: {
+    type: Date,
+    default: Date.now
+  },
+  completedAt: {
+    type: Date
+  },
+  status: {
+    type: String,
+    enum: ['in_progress', 'completed', 'abandoned'],
+    default: 'in_progress'
+  }
+});
+
+module.exports = mongoose.model('UserProgress', userProgressSchema); 
\ No newline at end of file
-- 
2.48.1.windows.1

