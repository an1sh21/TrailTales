From 9b6ca0e7e1bc40984cd9c7ce54c65c62d22eb37a Mon Sep 17 00:00:00 2001
From: VidyaSenevirathna <165774022+VidyaSenevirathna@users.noreply.github.com>
Date: Mon, 10 Mar 2025 09:01:13 +0530
Subject: [PATCH 09/22] Add AR token collection endpoints and site token
 retrieval

---
 src/controllers/questController.js | 141 +++++++++++++++++++++++++++++
 src/routes/questRoutes.js          |   2 +
 2 files changed, 143 insertions(+)

diff --git a/src/controllers/questController.js b/src/controllers/questController.js
index 4c18640..8dbe478 100644
--- a/src/controllers/questController.js
+++ b/src/controllers/questController.js
@@ -140,6 +140,147 @@ exports.collectToken = async (req, res) => {
   }
 };
 
+exports.getSiteTokens = async (req, res) => {
+  try {
+    const { questId } = req.params;
+    const userId = req.user.uid;
+
+    // Get quest progress
+    const progressRef = await db.collection('userProgress')
+      .where('userId', '==', userId)
+      .where('questId', '==', questId)
+      .where('status', '==', 'in_progress')
+      .get();
+
+    if (progressRef.empty) {
+      return res.status(404).json({ message: 'Quest progress not found' });
+    }
+
+    const progress = progressRef.docs[0].data();
+
+    // Get quest details
+    const questDoc = await db.collection('quests').doc(questId).get();
+    if (!questDoc.exists) {
+      return res.status(404).json({ message: 'Quest not found' });
+    }
+    const quest = questDoc.data();
+
+    // Filter tokens that are available at the current site
+    const currentSiteTokens = quest.tokenLocations.filter(token => 
+      !progress.collectedTokens.includes(token.id)
+    );
+
+    res.json({
+      siteMap: quest.siteMap, // URL or data for the site map image
+      availableTokens: currentSiteTokens.map(token => ({
+        id: token.id,
+        type: token.type, // 'coin' or 'token'
+        location: token.location,
+        arMarker: token.arMarker, // AR marker information
+        collectInstructions: token.type === 'coin' ? 'Tap on the Coin' : 'Tap on the Token'
+      })),
+      collectedTokens: progress.collectedTokens,
+      totalTokens: quest.tokenLocations.length,
+      currentProgress: progress.currentStep
+    });
+  } catch (error) {
+    res.status(500).json({ message: error.message });
+  }
+};
+
+exports.collectTokenViaAR = async (req, res) => {
+  try {
+    const { questId, tokenId, userLocation, arScanData } = req.body;
+    const userId = req.user.uid;
+
+    // Verify user's progress and location
+    const progressRef = await db.collection('userProgress')
+      .where('userId', '==', userId)
+      .where('questId', '==', questId)
+      .where('status', '==', 'in_progress')
+      .get();
+
+    if (progressRef.empty) {
+      return res.status(404).json({ message: 'Quest progress not found' });
+    }
+
+    const progress = progressRef.docs[0].data();
+    
+    // Check if token is already collected
+    if (progress.collectedTokens.includes(tokenId)) {
+      return res.status(400).json({ message: 'Token already collected' });
+    }
+
+    // Get token details
+    const tokenDoc = await db.collection('storyTokens').doc(tokenId).get();
+    if (!tokenDoc.exists) {
+      return res.status(404).json({ message: 'Token not found' });
+    }
+    const token = tokenDoc.data();
+
+    // Verify location
+    const distance = calculateDistance(
+      userLocation.latitude,
+      userLocation.longitude,
+      token.location.coordinates.latitude,
+      token.location.coordinates.longitude
+    );
+
+    if (distance > token.location.radius) {
+      return res.status(400).json({ message: 'You are too far from the token location' });
+    }
+
+    // Verify AR scan data (implement your AR validation logic here)
+    if (!validateARScan(arScanData, token.arMarker)) {
+      return res.status(400).json({ message: 'Invalid AR scan. Please align your camera properly.' });
+    }
+
+    // Update progress
+    const progressDocRef = progressRef.docs[0].ref;
+    await progressDocRef.update({
+      collectedTokens: admin.firestore.FieldValue.arrayUnion(tokenId),
+      currentStep: progress.currentStep + 1,
+      lastCollectedAt: admin.firestore.FieldValue.serverTimestamp()
+    });
+
+    // Get remaining tokens at the site
+    const questDoc = await db.collection('quests').doc(questId).get();
+    const quest = questDoc.data();
+    const remainingTokens = quest.tokenLocations.filter(t => 
+      !progress.collectedTokens.includes(t.id) && t.id !== tokenId
+    );
+
+    res.json({
+      message: 'Token collected successfully!',
+      collectedToken: {
+        id: tokenId,
+        type: token.type,
+        reward: token.reward
+      },
+      remainingTokens: remainingTokens.map(token => ({
+        id: token.id,
+        type: token.type,
+        location: token.location,
+        collectInstructions: token.type === 'coin' ? 'Tap on the Coin' : 'Tap on the Token'
+      })),
+      progress: {
+        currentStep: progress.currentStep + 1,
+        totalSteps: quest.tokenLocations.length,
+        completed: progress.currentStep + 1 === quest.tokenLocations.length
+      }
+    });
+  } catch (error) {
+    res.status(500).json({ message: error.message });
+  }
+};
+
+// Helper function to validate AR scan
+function validateARScan(scanData, markerData) {
+  // Implement your AR validation logic here
+  // This is a placeholder - replace with actual AR validation
+  return true;
+}
+
 function calculateDistance(lat1, lon1, lat2, lon2) {
   const R = 6371e3; // Earth's radius in meters
   const Ï†1 = lat1 * Math.PI/180;
diff --git a/src/routes/questRoutes.js b/src/routes/questRoutes.js
index b0ceda0..0e6de62 100644
--- a/src/routes/questRoutes.js
+++ b/src/routes/questRoutes.js
@@ -6,5 +6,7 @@ const auth = require('../middleware/auth');
 router.get('/quests', questController.getAllQuests);
 router.post('/quests/start', auth, questController.startQuest);
 router.post('/quests/collect-token', auth, questController.collectToken);
+router.get('/quests/:questId/site-tokens', auth, questController.getSiteTokens);
+router.post('/quests/ar-collect-token', auth, questController.collectTokenViaAR);
 
 module.exports = router; 
\ No newline at end of file
-- 
2.48.1.windows.1

